// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TtTime.proto

#ifndef PROTOBUF_TtTime_2eproto__INCLUDED
#define PROTOBUF_TtTime_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace phonedata {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_TtTime_2eproto();
void protobuf_InitDefaults_TtTime_2eproto();
void protobuf_AssignDesc_TtTime_2eproto();
void protobuf_ShutdownFile_TtTime_2eproto();

class TtTime;

// ===================================================================

class TtTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phonedata.TtTime) */ {
 public:
  TtTime();
  virtual ~TtTime();

  TtTime(const TtTime& from);

  inline TtTime& operator=(const TtTime& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TtTime& default_instance();

  static const TtTime* internal_default_instance();

  void Swap(TtTime* other);

  // implements Message ----------------------------------------------

  inline TtTime* New() const { return New(NULL); }

  TtTime* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TtTime& from);
  void MergeFrom(const TtTime& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TtTime* other);
  void UnsafeMergeFrom(const TtTime& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional bool isSync = 2;
  void clear_issync();
  static const int kIsSyncFieldNumber = 2;
  bool issync() const;
  void set_issync(bool value);

  // optional string date_time = 3;
  void clear_date_time();
  static const int kDateTimeFieldNumber = 3;
  const ::std::string& date_time() const;
  void set_date_time(const ::std::string& value);
  void set_date_time(const char* value);
  void set_date_time(const char* value, size_t size);
  ::std::string* mutable_date_time();
  ::std::string* release_date_time();
  void set_allocated_date_time(::std::string* date_time);

  // optional string date_time_server = 4;
  void clear_date_time_server();
  static const int kDateTimeServerFieldNumber = 4;
  const ::std::string& date_time_server() const;
  void set_date_time_server(const ::std::string& value);
  void set_date_time_server(const char* value);
  void set_date_time_server(const char* value, size_t size);
  ::std::string* mutable_date_time_server();
  ::std::string* release_date_time_server();
  void set_allocated_date_time_server(::std::string* date_time_server);

  // @@protoc_insertion_point(class_scope:phonedata.TtTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr date_time_;
  ::google::protobuf::internal::ArenaStringPtr date_time_server_;
  bool issync_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_TtTime_2eproto_impl();
  friend void  protobuf_AddDesc_TtTime_2eproto_impl();
  friend void protobuf_AssignDesc_TtTime_2eproto();
  friend void protobuf_ShutdownFile_TtTime_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TtTime> TtTime_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TtTime

// optional string ip = 1;
inline void TtTime::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TtTime::ip() const {
  // @@protoc_insertion_point(field_get:phonedata.TtTime.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TtTime::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phonedata.TtTime.ip)
}
inline void TtTime::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phonedata.TtTime.ip)
}
inline void TtTime::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phonedata.TtTime.ip)
}
inline ::std::string* TtTime::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:phonedata.TtTime.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TtTime::release_ip() {
  // @@protoc_insertion_point(field_release:phonedata.TtTime.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TtTime::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:phonedata.TtTime.ip)
}

// optional bool isSync = 2;
inline void TtTime::clear_issync() {
  issync_ = false;
}
inline bool TtTime::issync() const {
  // @@protoc_insertion_point(field_get:phonedata.TtTime.isSync)
  return issync_;
}
inline void TtTime::set_issync(bool value) {
  
  issync_ = value;
  // @@protoc_insertion_point(field_set:phonedata.TtTime.isSync)
}

// optional string date_time = 3;
inline void TtTime::clear_date_time() {
  date_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TtTime::date_time() const {
  // @@protoc_insertion_point(field_get:phonedata.TtTime.date_time)
  return date_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TtTime::set_date_time(const ::std::string& value) {
  
  date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phonedata.TtTime.date_time)
}
inline void TtTime::set_date_time(const char* value) {
  
  date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phonedata.TtTime.date_time)
}
inline void TtTime::set_date_time(const char* value, size_t size) {
  
  date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phonedata.TtTime.date_time)
}
inline ::std::string* TtTime::mutable_date_time() {
  
  // @@protoc_insertion_point(field_mutable:phonedata.TtTime.date_time)
  return date_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TtTime::release_date_time() {
  // @@protoc_insertion_point(field_release:phonedata.TtTime.date_time)
  
  return date_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TtTime::set_allocated_date_time(::std::string* date_time) {
  if (date_time != NULL) {
    
  } else {
    
  }
  date_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date_time);
  // @@protoc_insertion_point(field_set_allocated:phonedata.TtTime.date_time)
}

// optional string date_time_server = 4;
inline void TtTime::clear_date_time_server() {
  date_time_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TtTime::date_time_server() const {
  // @@protoc_insertion_point(field_get:phonedata.TtTime.date_time_server)
  return date_time_server_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TtTime::set_date_time_server(const ::std::string& value) {
  
  date_time_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phonedata.TtTime.date_time_server)
}
inline void TtTime::set_date_time_server(const char* value) {
  
  date_time_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phonedata.TtTime.date_time_server)
}
inline void TtTime::set_date_time_server(const char* value, size_t size) {
  
  date_time_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phonedata.TtTime.date_time_server)
}
inline ::std::string* TtTime::mutable_date_time_server() {
  
  // @@protoc_insertion_point(field_mutable:phonedata.TtTime.date_time_server)
  return date_time_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TtTime::release_date_time_server() {
  // @@protoc_insertion_point(field_release:phonedata.TtTime.date_time_server)
  
  return date_time_server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TtTime::set_allocated_date_time_server(::std::string* date_time_server) {
  if (date_time_server != NULL) {
    
  } else {
    
  }
  date_time_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date_time_server);
  // @@protoc_insertion_point(field_set_allocated:phonedata.TtTime.date_time_server)
}

inline const TtTime* TtTime::internal_default_instance() {
  return &TtTime_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace phonedata

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TtTime_2eproto__INCLUDED
