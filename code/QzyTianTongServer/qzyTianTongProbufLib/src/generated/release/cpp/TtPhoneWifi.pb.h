// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TtPhoneWifi.proto

#ifndef PROTOBUF_TtPhoneWifi_2eproto__INCLUDED
#define PROTOBUF_TtPhoneWifi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace phonedata {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_TtPhoneWifi_2eproto();
void protobuf_InitDefaults_TtPhoneWifi_2eproto();
void protobuf_AssignDesc_TtPhoneWifi_2eproto();
void protobuf_ShutdownFile_TtPhoneWifi_2eproto();

class TtWifi;

// ===================================================================

class TtWifi : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:phonedata.TtWifi) */ {
 public:
  TtWifi();
  virtual ~TtWifi();

  TtWifi(const TtWifi& from);

  inline TtWifi& operator=(const TtWifi& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TtWifi& default_instance();

  static const TtWifi* internal_default_instance();

  void Swap(TtWifi* other);

  // implements Message ----------------------------------------------

  inline TtWifi* New() const { return New(NULL); }

  TtWifi* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TtWifi& from);
  void MergeFrom(const TtWifi& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TtWifi* other);
  void UnsafeMergeFrom(const TtWifi& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string ssid = 2;
  void clear_ssid();
  static const int kSsidFieldNumber = 2;
  const ::std::string& ssid() const;
  void set_ssid(const ::std::string& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  ::std::string* mutable_ssid();
  ::std::string* release_ssid();
  void set_allocated_ssid(::std::string* ssid);

  // optional string passwd = 3;
  void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // optional bool isSet = 4;
  void clear_isset();
  static const int kIsSetFieldNumber = 4;
  bool isset() const;
  void set_isset(bool value);

  // @@protoc_insertion_point(class_scope:phonedata.TtWifi)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr ssid_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  bool isset_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_TtPhoneWifi_2eproto_impl();
  friend void  protobuf_AddDesc_TtPhoneWifi_2eproto_impl();
  friend void protobuf_AssignDesc_TtPhoneWifi_2eproto();
  friend void protobuf_ShutdownFile_TtPhoneWifi_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TtWifi> TtWifi_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TtWifi

// optional string ip = 1;
inline void TtWifi::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TtWifi::ip() const {
  // @@protoc_insertion_point(field_get:phonedata.TtWifi.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TtWifi::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phonedata.TtWifi.ip)
}
inline void TtWifi::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phonedata.TtWifi.ip)
}
inline void TtWifi::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phonedata.TtWifi.ip)
}
inline ::std::string* TtWifi::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:phonedata.TtWifi.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TtWifi::release_ip() {
  // @@protoc_insertion_point(field_release:phonedata.TtWifi.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TtWifi::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:phonedata.TtWifi.ip)
}

// optional string ssid = 2;
inline void TtWifi::clear_ssid() {
  ssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TtWifi::ssid() const {
  // @@protoc_insertion_point(field_get:phonedata.TtWifi.ssid)
  return ssid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TtWifi::set_ssid(const ::std::string& value) {
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phonedata.TtWifi.ssid)
}
inline void TtWifi::set_ssid(const char* value) {
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phonedata.TtWifi.ssid)
}
inline void TtWifi::set_ssid(const char* value, size_t size) {
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phonedata.TtWifi.ssid)
}
inline ::std::string* TtWifi::mutable_ssid() {
  
  // @@protoc_insertion_point(field_mutable:phonedata.TtWifi.ssid)
  return ssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TtWifi::release_ssid() {
  // @@protoc_insertion_point(field_release:phonedata.TtWifi.ssid)
  
  return ssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TtWifi::set_allocated_ssid(::std::string* ssid) {
  if (ssid != NULL) {
    
  } else {
    
  }
  ssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ssid);
  // @@protoc_insertion_point(field_set_allocated:phonedata.TtWifi.ssid)
}

// optional string passwd = 3;
inline void TtWifi::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TtWifi::passwd() const {
  // @@protoc_insertion_point(field_get:phonedata.TtWifi.passwd)
  return passwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TtWifi::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phonedata.TtWifi.passwd)
}
inline void TtWifi::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phonedata.TtWifi.passwd)
}
inline void TtWifi::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phonedata.TtWifi.passwd)
}
inline ::std::string* TtWifi::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:phonedata.TtWifi.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TtWifi::release_passwd() {
  // @@protoc_insertion_point(field_release:phonedata.TtWifi.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TtWifi::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:phonedata.TtWifi.passwd)
}

// optional bool isSet = 4;
inline void TtWifi::clear_isset() {
  isset_ = false;
}
inline bool TtWifi::isset() const {
  // @@protoc_insertion_point(field_get:phonedata.TtWifi.isSet)
  return isset_;
}
inline void TtWifi::set_isset(bool value) {
  
  isset_ = value;
  // @@protoc_insertion_point(field_set:phonedata.TtWifi.isSet)
}

inline const TtWifi* TtWifi::internal_default_instance() {
  return &TtWifi_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace phonedata

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TtPhoneWifi_2eproto__INCLUDED
