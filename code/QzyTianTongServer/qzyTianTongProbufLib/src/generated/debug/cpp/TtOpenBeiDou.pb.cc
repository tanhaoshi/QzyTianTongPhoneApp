// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TtOpenBeiDou.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TtOpenBeiDou.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace phonedata {

namespace {

const ::google::protobuf::Descriptor* TtOpenBeiDou_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TtOpenBeiDou_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TtOpenBeiDou_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_TtOpenBeiDou_2eproto() {
  protobuf_AddDesc_TtOpenBeiDou_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TtOpenBeiDou.proto");
  GOOGLE_CHECK(file != NULL);
  TtOpenBeiDou_descriptor_ = file->message_type(0);
  static const int TtOpenBeiDou_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtOpenBeiDou, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtOpenBeiDou, request_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtOpenBeiDou, response_status_),
  };
  TtOpenBeiDou_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TtOpenBeiDou_descriptor_,
      TtOpenBeiDou::internal_default_instance(),
      TtOpenBeiDou_offsets_,
      -1,
      -1,
      -1,
      sizeof(TtOpenBeiDou),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtOpenBeiDou, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TtOpenBeiDou_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TtOpenBeiDou_descriptor_, TtOpenBeiDou::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TtOpenBeiDou_2eproto() {
  TtOpenBeiDou_default_instance_.Shutdown();
  delete TtOpenBeiDou_reflection_;
}

void protobuf_InitDefaults_TtOpenBeiDou_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  TtOpenBeiDou_default_instance_.DefaultConstruct();
  TtOpenBeiDou_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_TtOpenBeiDou_2eproto_once_);
void protobuf_InitDefaults_TtOpenBeiDou_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_TtOpenBeiDou_2eproto_once_,
                 &protobuf_InitDefaults_TtOpenBeiDou_2eproto_impl);
}
void protobuf_AddDesc_TtOpenBeiDou_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_TtOpenBeiDou_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022TtOpenBeiDou.proto\022\tphonedata\"O\n\014TtOpe"
    "nBeiDou\022\016\n\006isOpen\030\001 \001(\010\022\026\n\016request_statu"
    "s\030\002 \001(\010\022\027\n\017response_status\030\003 \001(\010B%\n\017com."
    "qzy.tt.dataB\022TtOpenBeiDouProtosb\006proto3", 159);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TtOpenBeiDou.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TtOpenBeiDou_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_TtOpenBeiDou_2eproto_once_);
void protobuf_AddDesc_TtOpenBeiDou_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_TtOpenBeiDou_2eproto_once_,
                 &protobuf_AddDesc_TtOpenBeiDou_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TtOpenBeiDou_2eproto {
  StaticDescriptorInitializer_TtOpenBeiDou_2eproto() {
    protobuf_AddDesc_TtOpenBeiDou_2eproto();
  }
} static_descriptor_initializer_TtOpenBeiDou_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TtOpenBeiDou::kIsOpenFieldNumber;
const int TtOpenBeiDou::kRequestStatusFieldNumber;
const int TtOpenBeiDou::kResponseStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TtOpenBeiDou::TtOpenBeiDou()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TtOpenBeiDou_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:phonedata.TtOpenBeiDou)
}

void TtOpenBeiDou::InitAsDefaultInstance() {
}

TtOpenBeiDou::TtOpenBeiDou(const TtOpenBeiDou& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:phonedata.TtOpenBeiDou)
}

void TtOpenBeiDou::SharedCtor() {
  ::memset(&isopen_, 0, reinterpret_cast<char*>(&response_status_) -
    reinterpret_cast<char*>(&isopen_) + sizeof(response_status_));
  _cached_size_ = 0;
}

TtOpenBeiDou::~TtOpenBeiDou() {
  // @@protoc_insertion_point(destructor:phonedata.TtOpenBeiDou)
  SharedDtor();
}

void TtOpenBeiDou::SharedDtor() {
}

void TtOpenBeiDou::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TtOpenBeiDou::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TtOpenBeiDou_descriptor_;
}

const TtOpenBeiDou& TtOpenBeiDou::default_instance() {
  protobuf_InitDefaults_TtOpenBeiDou_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TtOpenBeiDou> TtOpenBeiDou_default_instance_;

TtOpenBeiDou* TtOpenBeiDou::New(::google::protobuf::Arena* arena) const {
  TtOpenBeiDou* n = new TtOpenBeiDou;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TtOpenBeiDou::Clear() {
// @@protoc_insertion_point(message_clear_start:phonedata.TtOpenBeiDou)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TtOpenBeiDou, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TtOpenBeiDou*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(isopen_, response_status_);

#undef ZR_HELPER_
#undef ZR_

}

bool TtOpenBeiDou::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phonedata.TtOpenBeiDou)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isOpen = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_status;
        break;
      }

      // optional bool request_status = 2;
      case 2: {
        if (tag == 16) {
         parse_request_status:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_response_status;
        break;
      }

      // optional bool response_status = 3;
      case 3: {
        if (tag == 24) {
         parse_response_status:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &response_status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phonedata.TtOpenBeiDou)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phonedata.TtOpenBeiDou)
  return false;
#undef DO_
}

void TtOpenBeiDou::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phonedata.TtOpenBeiDou)
  // optional bool isOpen = 1;
  if (this->isopen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isopen(), output);
  }

  // optional bool request_status = 2;
  if (this->request_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->request_status(), output);
  }

  // optional bool response_status = 3;
  if (this->response_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->response_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:phonedata.TtOpenBeiDou)
}

::google::protobuf::uint8* TtOpenBeiDou::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phonedata.TtOpenBeiDou)
  // optional bool isOpen = 1;
  if (this->isopen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isopen(), target);
  }

  // optional bool request_status = 2;
  if (this->request_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->request_status(), target);
  }

  // optional bool response_status = 3;
  if (this->response_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->response_status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:phonedata.TtOpenBeiDou)
  return target;
}

size_t TtOpenBeiDou::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phonedata.TtOpenBeiDou)
  size_t total_size = 0;

  // optional bool isOpen = 1;
  if (this->isopen() != 0) {
    total_size += 1 + 1;
  }

  // optional bool request_status = 2;
  if (this->request_status() != 0) {
    total_size += 1 + 1;
  }

  // optional bool response_status = 3;
  if (this->response_status() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TtOpenBeiDou::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phonedata.TtOpenBeiDou)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TtOpenBeiDou* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TtOpenBeiDou>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phonedata.TtOpenBeiDou)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phonedata.TtOpenBeiDou)
    UnsafeMergeFrom(*source);
  }
}

void TtOpenBeiDou::MergeFrom(const TtOpenBeiDou& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phonedata.TtOpenBeiDou)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TtOpenBeiDou::UnsafeMergeFrom(const TtOpenBeiDou& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.isopen() != 0) {
    set_isopen(from.isopen());
  }
  if (from.request_status() != 0) {
    set_request_status(from.request_status());
  }
  if (from.response_status() != 0) {
    set_response_status(from.response_status());
  }
}

void TtOpenBeiDou::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phonedata.TtOpenBeiDou)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TtOpenBeiDou::CopyFrom(const TtOpenBeiDou& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phonedata.TtOpenBeiDou)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TtOpenBeiDou::IsInitialized() const {

  return true;
}

void TtOpenBeiDou::Swap(TtOpenBeiDou* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TtOpenBeiDou::InternalSwap(TtOpenBeiDou* other) {
  std::swap(isopen_, other->isopen_);
  std::swap(request_status_, other->request_status_);
  std::swap(response_status_, other->response_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TtOpenBeiDou::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TtOpenBeiDou_descriptor_;
  metadata.reflection = TtOpenBeiDou_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TtOpenBeiDou

// optional bool isOpen = 1;
void TtOpenBeiDou::clear_isopen() {
  isopen_ = false;
}
bool TtOpenBeiDou::isopen() const {
  // @@protoc_insertion_point(field_get:phonedata.TtOpenBeiDou.isOpen)
  return isopen_;
}
void TtOpenBeiDou::set_isopen(bool value) {
  
  isopen_ = value;
  // @@protoc_insertion_point(field_set:phonedata.TtOpenBeiDou.isOpen)
}

// optional bool request_status = 2;
void TtOpenBeiDou::clear_request_status() {
  request_status_ = false;
}
bool TtOpenBeiDou::request_status() const {
  // @@protoc_insertion_point(field_get:phonedata.TtOpenBeiDou.request_status)
  return request_status_;
}
void TtOpenBeiDou::set_request_status(bool value) {
  
  request_status_ = value;
  // @@protoc_insertion_point(field_set:phonedata.TtOpenBeiDou.request_status)
}

// optional bool response_status = 3;
void TtOpenBeiDou::clear_response_status() {
  response_status_ = false;
}
bool TtOpenBeiDou::response_status() const {
  // @@protoc_insertion_point(field_get:phonedata.TtOpenBeiDou.response_status)
  return response_status_;
}
void TtOpenBeiDou::set_response_status(bool value) {
  
  response_status_ = value;
  // @@protoc_insertion_point(field_set:phonedata.TtOpenBeiDou.response_status)
}

inline const TtOpenBeiDou* TtOpenBeiDou::internal_default_instance() {
  return &TtOpenBeiDou_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace phonedata

// @@protoc_insertion_point(global_scope)
