// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TtTime.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TtTime.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace phonedata {

namespace {

const ::google::protobuf::Descriptor* TtTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TtTime_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TtTime_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_TtTime_2eproto() {
  protobuf_AddDesc_TtTime_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TtTime.proto");
  GOOGLE_CHECK(file != NULL);
  TtTime_descriptor_ = file->message_type(0);
  static const int TtTime_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtTime, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtTime, issync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtTime, date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtTime, date_time_server_),
  };
  TtTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TtTime_descriptor_,
      TtTime::internal_default_instance(),
      TtTime_offsets_,
      -1,
      -1,
      -1,
      sizeof(TtTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TtTime, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TtTime_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TtTime_descriptor_, TtTime::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TtTime_2eproto() {
  TtTime_default_instance_.Shutdown();
  delete TtTime_reflection_;
}

void protobuf_InitDefaults_TtTime_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  TtTime_default_instance_.DefaultConstruct();
  TtTime_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_TtTime_2eproto_once_);
void protobuf_InitDefaults_TtTime_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_TtTime_2eproto_once_,
                 &protobuf_InitDefaults_TtTime_2eproto_impl);
}
void protobuf_AddDesc_TtTime_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_TtTime_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014TtTime.proto\022\tphonedata\"Q\n\006TtTime\022\n\n\002i"
    "p\030\001 \001(\t\022\016\n\006isSync\030\002 \001(\010\022\021\n\tdate_time\030\003 \001"
    "(\t\022\030\n\020date_time_server\030\004 \001(\tB\037\n\017com.qzy."
    "tt.dataB\014TtTimeProtosb\006proto3", 149);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TtTime.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TtTime_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_TtTime_2eproto_once_);
void protobuf_AddDesc_TtTime_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_TtTime_2eproto_once_,
                 &protobuf_AddDesc_TtTime_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TtTime_2eproto {
  StaticDescriptorInitializer_TtTime_2eproto() {
    protobuf_AddDesc_TtTime_2eproto();
  }
} static_descriptor_initializer_TtTime_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TtTime::kIpFieldNumber;
const int TtTime::kIsSyncFieldNumber;
const int TtTime::kDateTimeFieldNumber;
const int TtTime::kDateTimeServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TtTime::TtTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TtTime_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:phonedata.TtTime)
}

void TtTime::InitAsDefaultInstance() {
}

TtTime::TtTime(const TtTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:phonedata.TtTime)
}

void TtTime::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_time_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issync_ = false;
  _cached_size_ = 0;
}

TtTime::~TtTime() {
  // @@protoc_insertion_point(destructor:phonedata.TtTime)
  SharedDtor();
}

void TtTime::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_time_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TtTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TtTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TtTime_descriptor_;
}

const TtTime& TtTime::default_instance() {
  protobuf_InitDefaults_TtTime_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TtTime> TtTime_default_instance_;

TtTime* TtTime::New(::google::protobuf::Arena* arena) const {
  TtTime* n = new TtTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TtTime::Clear() {
// @@protoc_insertion_point(message_clear_start:phonedata.TtTime)
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issync_ = false;
  date_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_time_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TtTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phonedata.TtTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phonedata.TtTime.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isSync;
        break;
      }

      // optional bool isSync = 2;
      case 2: {
        if (tag == 16) {
         parse_isSync:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issync_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_date_time;
        break;
      }

      // optional string date_time = 3;
      case 3: {
        if (tag == 26) {
         parse_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date_time().data(), this->date_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phonedata.TtTime.date_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_date_time_server;
        break;
      }

      // optional string date_time_server = 4;
      case 4: {
        if (tag == 34) {
         parse_date_time_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_time_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date_time_server().data(), this->date_time_server().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phonedata.TtTime.date_time_server"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phonedata.TtTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phonedata.TtTime)
  return false;
#undef DO_
}

void TtTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phonedata.TtTime)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phonedata.TtTime.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional bool isSync = 2;
  if (this->issync() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->issync(), output);
  }

  // optional string date_time = 3;
  if (this->date_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date_time().data(), this->date_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phonedata.TtTime.date_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->date_time(), output);
  }

  // optional string date_time_server = 4;
  if (this->date_time_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date_time_server().data(), this->date_time_server().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phonedata.TtTime.date_time_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->date_time_server(), output);
  }

  // @@protoc_insertion_point(serialize_end:phonedata.TtTime)
}

::google::protobuf::uint8* TtTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phonedata.TtTime)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phonedata.TtTime.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional bool isSync = 2;
  if (this->issync() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->issync(), target);
  }

  // optional string date_time = 3;
  if (this->date_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date_time().data(), this->date_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phonedata.TtTime.date_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->date_time(), target);
  }

  // optional string date_time_server = 4;
  if (this->date_time_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date_time_server().data(), this->date_time_server().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phonedata.TtTime.date_time_server");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->date_time_server(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:phonedata.TtTime)
  return target;
}

size_t TtTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phonedata.TtTime)
  size_t total_size = 0;

  // optional string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional bool isSync = 2;
  if (this->issync() != 0) {
    total_size += 1 + 1;
  }

  // optional string date_time = 3;
  if (this->date_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date_time());
  }

  // optional string date_time_server = 4;
  if (this->date_time_server().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date_time_server());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TtTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phonedata.TtTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TtTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TtTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phonedata.TtTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phonedata.TtTime)
    UnsafeMergeFrom(*source);
  }
}

void TtTime::MergeFrom(const TtTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phonedata.TtTime)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TtTime::UnsafeMergeFrom(const TtTime& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.issync() != 0) {
    set_issync(from.issync());
  }
  if (from.date_time().size() > 0) {

    date_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_time_);
  }
  if (from.date_time_server().size() > 0) {

    date_time_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_time_server_);
  }
}

void TtTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phonedata.TtTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TtTime::CopyFrom(const TtTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phonedata.TtTime)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TtTime::IsInitialized() const {

  return true;
}

void TtTime::Swap(TtTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TtTime::InternalSwap(TtTime* other) {
  ip_.Swap(&other->ip_);
  std::swap(issync_, other->issync_);
  date_time_.Swap(&other->date_time_);
  date_time_server_.Swap(&other->date_time_server_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TtTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TtTime_descriptor_;
  metadata.reflection = TtTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TtTime

// optional string ip = 1;
void TtTime::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TtTime::ip() const {
  // @@protoc_insertion_point(field_get:phonedata.TtTime.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TtTime::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phonedata.TtTime.ip)
}
void TtTime::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phonedata.TtTime.ip)
}
void TtTime::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phonedata.TtTime.ip)
}
::std::string* TtTime::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:phonedata.TtTime.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TtTime::release_ip() {
  // @@protoc_insertion_point(field_release:phonedata.TtTime.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TtTime::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:phonedata.TtTime.ip)
}

// optional bool isSync = 2;
void TtTime::clear_issync() {
  issync_ = false;
}
bool TtTime::issync() const {
  // @@protoc_insertion_point(field_get:phonedata.TtTime.isSync)
  return issync_;
}
void TtTime::set_issync(bool value) {
  
  issync_ = value;
  // @@protoc_insertion_point(field_set:phonedata.TtTime.isSync)
}

// optional string date_time = 3;
void TtTime::clear_date_time() {
  date_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TtTime::date_time() const {
  // @@protoc_insertion_point(field_get:phonedata.TtTime.date_time)
  return date_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TtTime::set_date_time(const ::std::string& value) {
  
  date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phonedata.TtTime.date_time)
}
void TtTime::set_date_time(const char* value) {
  
  date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phonedata.TtTime.date_time)
}
void TtTime::set_date_time(const char* value, size_t size) {
  
  date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phonedata.TtTime.date_time)
}
::std::string* TtTime::mutable_date_time() {
  
  // @@protoc_insertion_point(field_mutable:phonedata.TtTime.date_time)
  return date_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TtTime::release_date_time() {
  // @@protoc_insertion_point(field_release:phonedata.TtTime.date_time)
  
  return date_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TtTime::set_allocated_date_time(::std::string* date_time) {
  if (date_time != NULL) {
    
  } else {
    
  }
  date_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date_time);
  // @@protoc_insertion_point(field_set_allocated:phonedata.TtTime.date_time)
}

// optional string date_time_server = 4;
void TtTime::clear_date_time_server() {
  date_time_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TtTime::date_time_server() const {
  // @@protoc_insertion_point(field_get:phonedata.TtTime.date_time_server)
  return date_time_server_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TtTime::set_date_time_server(const ::std::string& value) {
  
  date_time_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phonedata.TtTime.date_time_server)
}
void TtTime::set_date_time_server(const char* value) {
  
  date_time_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phonedata.TtTime.date_time_server)
}
void TtTime::set_date_time_server(const char* value, size_t size) {
  
  date_time_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phonedata.TtTime.date_time_server)
}
::std::string* TtTime::mutable_date_time_server() {
  
  // @@protoc_insertion_point(field_mutable:phonedata.TtTime.date_time_server)
  return date_time_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TtTime::release_date_time_server() {
  // @@protoc_insertion_point(field_release:phonedata.TtTime.date_time_server)
  
  return date_time_server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TtTime::set_allocated_date_time_server(::std::string* date_time_server) {
  if (date_time_server != NULL) {
    
  } else {
    
  }
  date_time_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date_time_server);
  // @@protoc_insertion_point(field_set_allocated:phonedata.TtTime.date_time_server)
}

inline const TtTime* TtTime::internal_default_instance() {
  return &TtTime_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace phonedata

// @@protoc_insertion_point(global_scope)
