// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TtPhoneAudioData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TtPhoneAudioData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace phonedata {

namespace {

const ::google::protobuf::Descriptor* PhoneAudioData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhoneAudioData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TtPhoneAudioData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_TtPhoneAudioData_2eproto() {
  protobuf_AddDesc_TtPhoneAudioData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TtPhoneAudioData.proto");
  GOOGLE_CHECK(file != NULL);
  PhoneAudioData_descriptor_ = file->message_type(0);
  static const int PhoneAudioData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneAudioData, audiodata_),
  };
  PhoneAudioData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PhoneAudioData_descriptor_,
      PhoneAudioData::internal_default_instance(),
      PhoneAudioData_offsets_,
      -1,
      -1,
      -1,
      sizeof(PhoneAudioData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhoneAudioData, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TtPhoneAudioData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PhoneAudioData_descriptor_, PhoneAudioData::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TtPhoneAudioData_2eproto() {
  PhoneAudioData_default_instance_.Shutdown();
  delete PhoneAudioData_reflection_;
}

void protobuf_InitDefaults_TtPhoneAudioData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  PhoneAudioData_default_instance_.DefaultConstruct();
  PhoneAudioData_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_TtPhoneAudioData_2eproto_once_);
void protobuf_InitDefaults_TtPhoneAudioData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_TtPhoneAudioData_2eproto_once_,
                 &protobuf_InitDefaults_TtPhoneAudioData_2eproto_impl);
}
void protobuf_AddDesc_TtPhoneAudioData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_TtPhoneAudioData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026TtPhoneAudioData.proto\022\tphonedata\"#\n\016P"
    "honeAudioData\022\021\n\taudiodata\030\001 \001(\014B)\n\017com."
    "qzy.tt.dataB\026TtPhoneAudioDataProtosb\006pro"
    "to3", 123);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TtPhoneAudioData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TtPhoneAudioData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_TtPhoneAudioData_2eproto_once_);
void protobuf_AddDesc_TtPhoneAudioData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_TtPhoneAudioData_2eproto_once_,
                 &protobuf_AddDesc_TtPhoneAudioData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TtPhoneAudioData_2eproto {
  StaticDescriptorInitializer_TtPhoneAudioData_2eproto() {
    protobuf_AddDesc_TtPhoneAudioData_2eproto();
  }
} static_descriptor_initializer_TtPhoneAudioData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhoneAudioData::kAudiodataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhoneAudioData::PhoneAudioData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TtPhoneAudioData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:phonedata.PhoneAudioData)
}

void PhoneAudioData::InitAsDefaultInstance() {
}

PhoneAudioData::PhoneAudioData(const PhoneAudioData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:phonedata.PhoneAudioData)
}

void PhoneAudioData::SharedCtor() {
  audiodata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PhoneAudioData::~PhoneAudioData() {
  // @@protoc_insertion_point(destructor:phonedata.PhoneAudioData)
  SharedDtor();
}

void PhoneAudioData::SharedDtor() {
  audiodata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PhoneAudioData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhoneAudioData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhoneAudioData_descriptor_;
}

const PhoneAudioData& PhoneAudioData::default_instance() {
  protobuf_InitDefaults_TtPhoneAudioData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PhoneAudioData> PhoneAudioData_default_instance_;

PhoneAudioData* PhoneAudioData::New(::google::protobuf::Arena* arena) const {
  PhoneAudioData* n = new PhoneAudioData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhoneAudioData::Clear() {
// @@protoc_insertion_point(message_clear_start:phonedata.PhoneAudioData)
  audiodata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PhoneAudioData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phonedata.PhoneAudioData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes audiodata = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audiodata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phonedata.PhoneAudioData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phonedata.PhoneAudioData)
  return false;
#undef DO_
}

void PhoneAudioData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phonedata.PhoneAudioData)
  // optional bytes audiodata = 1;
  if (this->audiodata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->audiodata(), output);
  }

  // @@protoc_insertion_point(serialize_end:phonedata.PhoneAudioData)
}

::google::protobuf::uint8* PhoneAudioData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phonedata.PhoneAudioData)
  // optional bytes audiodata = 1;
  if (this->audiodata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->audiodata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:phonedata.PhoneAudioData)
  return target;
}

size_t PhoneAudioData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phonedata.PhoneAudioData)
  size_t total_size = 0;

  // optional bytes audiodata = 1;
  if (this->audiodata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->audiodata());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhoneAudioData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phonedata.PhoneAudioData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PhoneAudioData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhoneAudioData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phonedata.PhoneAudioData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phonedata.PhoneAudioData)
    UnsafeMergeFrom(*source);
  }
}

void PhoneAudioData::MergeFrom(const PhoneAudioData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phonedata.PhoneAudioData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PhoneAudioData::UnsafeMergeFrom(const PhoneAudioData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.audiodata().size() > 0) {

    audiodata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audiodata_);
  }
}

void PhoneAudioData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phonedata.PhoneAudioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneAudioData::CopyFrom(const PhoneAudioData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phonedata.PhoneAudioData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PhoneAudioData::IsInitialized() const {

  return true;
}

void PhoneAudioData::Swap(PhoneAudioData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhoneAudioData::InternalSwap(PhoneAudioData* other) {
  audiodata_.Swap(&other->audiodata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhoneAudioData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhoneAudioData_descriptor_;
  metadata.reflection = PhoneAudioData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhoneAudioData

// optional bytes audiodata = 1;
void PhoneAudioData::clear_audiodata() {
  audiodata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PhoneAudioData::audiodata() const {
  // @@protoc_insertion_point(field_get:phonedata.PhoneAudioData.audiodata)
  return audiodata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneAudioData::set_audiodata(const ::std::string& value) {
  
  audiodata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phonedata.PhoneAudioData.audiodata)
}
void PhoneAudioData::set_audiodata(const char* value) {
  
  audiodata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phonedata.PhoneAudioData.audiodata)
}
void PhoneAudioData::set_audiodata(const void* value, size_t size) {
  
  audiodata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phonedata.PhoneAudioData.audiodata)
}
::std::string* PhoneAudioData::mutable_audiodata() {
  
  // @@protoc_insertion_point(field_mutable:phonedata.PhoneAudioData.audiodata)
  return audiodata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhoneAudioData::release_audiodata() {
  // @@protoc_insertion_point(field_release:phonedata.PhoneAudioData.audiodata)
  
  return audiodata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhoneAudioData::set_allocated_audiodata(::std::string* audiodata) {
  if (audiodata != NULL) {
    
  } else {
    
  }
  audiodata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audiodata);
  // @@protoc_insertion_point(field_set_allocated:phonedata.PhoneAudioData.audiodata)
}

inline const PhoneAudioData* PhoneAudioData::internal_default_instance() {
  return &PhoneAudioData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace phonedata

// @@protoc_insertion_point(global_scope)
