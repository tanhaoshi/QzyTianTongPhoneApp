package com.tt.qzy.view.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tt.qzy.view.db.dao.MailListDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAIL_LIST_DAO".
*/
public class MailListDaoDao extends AbstractDao<MailListDao, Long> {

    public static final String TABLENAME = "MAIL_LIST_DAO";

    /**
     * Properties of entity MailListDao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phone = new Property(1, String.class, "phone", false, "PHONE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Ownership = new Property(3, String.class, "ownership", false, "OWNERSHIP");
        public final static Property TellTime = new Property(4, String.class, "tellTime", false, "TELL_TIME");
        public final static Property DataTime = new Property(5, String.class, "dataTime", false, "DATA_TIME");
        public final static Property CreateDate = new Property(6, String.class, "createDate", false, "CREATE_DATE");
        public final static Property Mail = new Property(7, String.class, "mail", false, "MAIL");
        public final static Property Qq = new Property(8, String.class, "qq", false, "QQ");
    }


    public MailListDaoDao(DaoConfig config) {
        super(config);
    }
    
    public MailListDaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAIL_LIST_DAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PHONE\" TEXT," + // 1: phone
                "\"NAME\" TEXT," + // 2: name
                "\"OWNERSHIP\" TEXT," + // 3: ownership
                "\"TELL_TIME\" TEXT," + // 4: tellTime
                "\"DATA_TIME\" TEXT," + // 5: dataTime
                "\"CREATE_DATE\" TEXT," + // 6: createDate
                "\"MAIL\" TEXT," + // 7: mail
                "\"QQ\" TEXT);"); // 8: qq
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAIL_LIST_DAO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MailListDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String ownership = entity.getOwnership();
        if (ownership != null) {
            stmt.bindString(4, ownership);
        }
 
        String tellTime = entity.getTellTime();
        if (tellTime != null) {
            stmt.bindString(5, tellTime);
        }
 
        String dataTime = entity.getDataTime();
        if (dataTime != null) {
            stmt.bindString(6, dataTime);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(7, createDate);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(8, mail);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(9, qq);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MailListDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String ownership = entity.getOwnership();
        if (ownership != null) {
            stmt.bindString(4, ownership);
        }
 
        String tellTime = entity.getTellTime();
        if (tellTime != null) {
            stmt.bindString(5, tellTime);
        }
 
        String dataTime = entity.getDataTime();
        if (dataTime != null) {
            stmt.bindString(6, dataTime);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(7, createDate);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(8, mail);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(9, qq);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MailListDao readEntity(Cursor cursor, int offset) {
        MailListDao entity = new MailListDao( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ownership
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tellTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dataTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mail
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // qq
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MailListDao entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOwnership(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTellTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDataTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQq(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MailListDao entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MailListDao entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MailListDao entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
