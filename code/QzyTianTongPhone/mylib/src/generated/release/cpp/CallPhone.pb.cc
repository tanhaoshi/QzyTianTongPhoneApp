// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CallPhone.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CallPhone.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace phonedata {

namespace {

const ::google::protobuf::Descriptor* CallPhone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallPhone_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CallPhone_PhoneCommand_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CallPhone_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_CallPhone_2eproto() {
  protobuf_AddDesc_CallPhone_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CallPhone.proto");
  GOOGLE_CHECK(file != NULL);
  CallPhone_descriptor_ = file->message_type(0);
  static const int CallPhone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallPhone, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallPhone, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallPhone, phonecommand_),
  };
  CallPhone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CallPhone_descriptor_,
      CallPhone::internal_default_instance(),
      CallPhone_offsets_,
      -1,
      -1,
      -1,
      sizeof(CallPhone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallPhone, _internal_metadata_));
  CallPhone_PhoneCommand_descriptor_ = CallPhone_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CallPhone_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CallPhone_descriptor_, CallPhone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CallPhone_2eproto() {
  CallPhone_default_instance_.Shutdown();
  delete CallPhone_reflection_;
}

void protobuf_InitDefaults_CallPhone_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  CallPhone_default_instance_.DefaultConstruct();
  CallPhone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_CallPhone_2eproto_once_);
void protobuf_InitDefaults_CallPhone_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_CallPhone_2eproto_once_,
                 &protobuf_InitDefaults_CallPhone_2eproto_impl);
}
void protobuf_AddDesc_CallPhone_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_CallPhone_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017CallPhone.proto\022\tphonedata\"\226\001\n\tCallPho"
    "ne\022\n\n\002ip\030\001 \001(\t\022\023\n\013phoneNumber\030\002 \001(\t\0227\n\014p"
    "honecommand\030\003 \001(\0162!.phonedata.CallPhone."
    "PhoneCommand\"/\n\014PhoneCommand\022\010\n\004NONE\020\000\022\010"
    "\n\004CALL\020\001\022\013\n\007HUANGUP\020\002B\"\n\017com.qzy.tt.data"
    "B\017CallPhoneProtosb\006proto3", 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CallPhone.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CallPhone_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CallPhone_2eproto_once_);
void protobuf_AddDesc_CallPhone_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CallPhone_2eproto_once_,
                 &protobuf_AddDesc_CallPhone_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CallPhone_2eproto {
  StaticDescriptorInitializer_CallPhone_2eproto() {
    protobuf_AddDesc_CallPhone_2eproto();
  }
} static_descriptor_initializer_CallPhone_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* CallPhone_PhoneCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallPhone_PhoneCommand_descriptor_;
}
bool CallPhone_PhoneCommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CallPhone_PhoneCommand CallPhone::NONE;
const CallPhone_PhoneCommand CallPhone::CALL;
const CallPhone_PhoneCommand CallPhone::HUANGUP;
const CallPhone_PhoneCommand CallPhone::PhoneCommand_MIN;
const CallPhone_PhoneCommand CallPhone::PhoneCommand_MAX;
const int CallPhone::PhoneCommand_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallPhone::kIpFieldNumber;
const int CallPhone::kPhoneNumberFieldNumber;
const int CallPhone::kPhonecommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallPhone::CallPhone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_CallPhone_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:phonedata.CallPhone)
}

void CallPhone::InitAsDefaultInstance() {
}

CallPhone::CallPhone(const CallPhone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:phonedata.CallPhone)
}

void CallPhone::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonecommand_ = 0;
  _cached_size_ = 0;
}

CallPhone::~CallPhone() {
  // @@protoc_insertion_point(destructor:phonedata.CallPhone)
  SharedDtor();
}

void CallPhone::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CallPhone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallPhone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallPhone_descriptor_;
}

const CallPhone& CallPhone::default_instance() {
  protobuf_InitDefaults_CallPhone_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CallPhone> CallPhone_default_instance_;

CallPhone* CallPhone::New(::google::protobuf::Arena* arena) const {
  CallPhone* n = new CallPhone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CallPhone::Clear() {
// @@protoc_insertion_point(message_clear_start:phonedata.CallPhone)
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonecommand_ = 0;
}

bool CallPhone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:phonedata.CallPhone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phonedata.CallPhone.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phoneNumber;
        break;
      }

      // optional string phoneNumber = 2;
      case 2: {
        if (tag == 18) {
         parse_phoneNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "phonedata.CallPhone.phoneNumber"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_phonecommand;
        break;
      }

      // optional .phonedata.CallPhone.PhoneCommand phonecommand = 3;
      case 3: {
        if (tag == 24) {
         parse_phonecommand:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_phonecommand(static_cast< ::phonedata::CallPhone_PhoneCommand >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:phonedata.CallPhone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:phonedata.CallPhone)
  return false;
#undef DO_
}

void CallPhone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:phonedata.CallPhone)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phonedata.CallPhone.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional string phoneNumber = 2;
  if (this->phonenumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phonedata.CallPhone.phoneNumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->phonenumber(), output);
  }

  // optional .phonedata.CallPhone.PhoneCommand phonecommand = 3;
  if (this->phonecommand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->phonecommand(), output);
  }

  // @@protoc_insertion_point(serialize_end:phonedata.CallPhone)
}

::google::protobuf::uint8* CallPhone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:phonedata.CallPhone)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phonedata.CallPhone.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional string phoneNumber = 2;
  if (this->phonenumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "phonedata.CallPhone.phoneNumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phonenumber(), target);
  }

  // optional .phonedata.CallPhone.PhoneCommand phonecommand = 3;
  if (this->phonecommand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->phonecommand(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:phonedata.CallPhone)
  return target;
}

size_t CallPhone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phonedata.CallPhone)
  size_t total_size = 0;

  // optional string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional string phoneNumber = 2;
  if (this->phonenumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phonenumber());
  }

  // optional .phonedata.CallPhone.PhoneCommand phonecommand = 3;
  if (this->phonecommand() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->phonecommand());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallPhone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phonedata.CallPhone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CallPhone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CallPhone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phonedata.CallPhone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phonedata.CallPhone)
    UnsafeMergeFrom(*source);
  }
}

void CallPhone::MergeFrom(const CallPhone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phonedata.CallPhone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CallPhone::UnsafeMergeFrom(const CallPhone& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.phonenumber().size() > 0) {

    phonenumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phonenumber_);
  }
  if (from.phonecommand() != 0) {
    set_phonecommand(from.phonecommand());
  }
}

void CallPhone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phonedata.CallPhone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallPhone::CopyFrom(const CallPhone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phonedata.CallPhone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CallPhone::IsInitialized() const {

  return true;
}

void CallPhone::Swap(CallPhone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallPhone::InternalSwap(CallPhone* other) {
  ip_.Swap(&other->ip_);
  phonenumber_.Swap(&other->phonenumber_);
  std::swap(phonecommand_, other->phonecommand_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallPhone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallPhone_descriptor_;
  metadata.reflection = CallPhone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallPhone

// optional string ip = 1;
void CallPhone::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CallPhone::ip() const {
  // @@protoc_insertion_point(field_get:phonedata.CallPhone.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CallPhone::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phonedata.CallPhone.ip)
}
void CallPhone::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phonedata.CallPhone.ip)
}
void CallPhone::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phonedata.CallPhone.ip)
}
::std::string* CallPhone::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:phonedata.CallPhone.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CallPhone::release_ip() {
  // @@protoc_insertion_point(field_release:phonedata.CallPhone.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CallPhone::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:phonedata.CallPhone.ip)
}

// optional string phoneNumber = 2;
void CallPhone::clear_phonenumber() {
  phonenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CallPhone::phonenumber() const {
  // @@protoc_insertion_point(field_get:phonedata.CallPhone.phoneNumber)
  return phonenumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CallPhone::set_phonenumber(const ::std::string& value) {
  
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:phonedata.CallPhone.phoneNumber)
}
void CallPhone::set_phonenumber(const char* value) {
  
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:phonedata.CallPhone.phoneNumber)
}
void CallPhone::set_phonenumber(const char* value, size_t size) {
  
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:phonedata.CallPhone.phoneNumber)
}
::std::string* CallPhone::mutable_phonenumber() {
  
  // @@protoc_insertion_point(field_mutable:phonedata.CallPhone.phoneNumber)
  return phonenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CallPhone::release_phonenumber() {
  // @@protoc_insertion_point(field_release:phonedata.CallPhone.phoneNumber)
  
  return phonenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CallPhone::set_allocated_phonenumber(::std::string* phonenumber) {
  if (phonenumber != NULL) {
    
  } else {
    
  }
  phonenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonenumber);
  // @@protoc_insertion_point(field_set_allocated:phonedata.CallPhone.phoneNumber)
}

// optional .phonedata.CallPhone.PhoneCommand phonecommand = 3;
void CallPhone::clear_phonecommand() {
  phonecommand_ = 0;
}
::phonedata::CallPhone_PhoneCommand CallPhone::phonecommand() const {
  // @@protoc_insertion_point(field_get:phonedata.CallPhone.phonecommand)
  return static_cast< ::phonedata::CallPhone_PhoneCommand >(phonecommand_);
}
void CallPhone::set_phonecommand(::phonedata::CallPhone_PhoneCommand value) {
  
  phonecommand_ = value;
  // @@protoc_insertion_point(field_set:phonedata.CallPhone.phonecommand)
}

inline const CallPhone* CallPhone::internal_default_instance() {
  return &CallPhone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace phonedata

// @@protoc_insertion_point(global_scope)
